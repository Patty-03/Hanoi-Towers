def generar_sucesores(estado):
    """
    Genera todos los estados v치lidos a los que se puede transicionar.
    """
    sucesores = []
    
    for i in range(3):
        for j in range(3):
            if i != j:
                if estado[i]:
                    disco_a_mover = estado[i][-1]
                    if not estado[j] or disco_a_mover < estado[j][-1]:
                        nueva_torre_origen = list(estado[i])
                        nueva_torre_destino = list(estado[j])

                        nueva_torre_origen.pop()
                        nueva_torre_destino.append(disco_a_mover)
                        
                        nuevo_estado_list = list(estado)
                        nuevo_estado_list[i] = tuple(nueva_torre_origen)
                        nuevo_estado_list[j] = tuple(nueva_torre_destino)
                        nuevo_estado = tuple(nuevo_estado_list)
                        
                        movimiento = (i, j)
                        sucesores.append((nuevo_estado, movimiento))
    return sucesores


def calcular_heuristica(estado, n_discos):
    """
    Calcula una heur칤stica para el estado actual.
    Devuelve el n칰mero de discos que no est치n en la torre objetivo (torre 2).
    """
    discos_fuera_de_lugar = 0
    torre_final = 2
    
    # Contamos los discos que no est치n en la torre final
    for disco in range(1, n_discos + 1):
        en_torre_final = False
        for torre_idx, torre in enumerate(estado):
            if disco in torre and torre_idx == torre_final:
                en_torre_final = True
                break
        if not en_torre_final:
            discos_fuera_de_lugar += 1
    
    return discos_fuera_de_lugar


def hanoi_busqueda_tabu(n_discos, tamano_lista_tabu=10, max_iter=10000):
    """
    Resuelve el problema de las Torres de Hanoi con b칰squeda tab칰.
    
    La b칰squeda tab칰 evita ciclos mediante el uso de una lista tab칰,
    que almacena movimientos recientes que est치n prohibidos temporalmente.
    """
    # Se genera el estado inicial a partir de n_discos
    estado_inicial = (
        tuple(range(n_discos, 0, -1)),  # Torre 0: discos del m치s grande al m치s peque침o
        (),  # Torre 1: vac칤a
        ()   # Torre 2: vac칤a
    )
    
    # Se genera el estado final
    estado_final = (
        (),
        (),
        tuple(range(n_discos, 0, -1)) # Torre 2: discos apilados correctamente
    )

    print(f"Resolviendo las Torres de Hanoi con {n_discos} discos usando B칰squeda Tab칰...")

    estado_actual = estado_inicial
    camino_actual = []
    
    # Lista tab칰 que almacena movimientos recientes para evitar ciclos
    lista_tabu = []
    
    # Almacenar el mejor estado encontrado
    mejor_estado = estado_actual
    mejor_heuristica = calcular_heuristica(mejor_estado, n_discos)

    for iteracion in range(max_iter):
        if estado_actual == estado_final:
            print("춰Soluci칩n encontrada! 游꿀")
            print(f"N칰mero de movimientos: {len(camino_actual)}")
            for i, movimiento in enumerate(camino_actual):
                print(f"Paso {i+1}: Mover de la torre {movimiento[0]} a la torre {movimiento[1]}")
            return True

        # Generar todos los sucesores v치lidos
        sucesores = generar_sucesores(estado_actual)
        
        if not sucesores:
            print("No hay m치s movimientos posibles.")
            break

        # Buscar el mejor movimiento que no est칠 en la lista tab칰
        mejor_sucesor = None
        mejor_heuristica_sucesor = float('inf')
        mejor_movimiento = None
        
        for sucesor_estado, movimiento in sucesores:
            # Solo considerar movimientos que no est칠n en la lista tab칰
            if movimiento not in lista_tabu:
                heuristica = calcular_heuristica(sucesor_estado, n_discos)
                # Buscar el mejor sucesor no tab칰
                if heuristica < mejor_heuristica_sucesor:
                    mejor_heuristica_sucesor = heuristica
                    mejor_sucesor = sucesor_estado
                    mejor_movimiento = movimiento
            else:
                # Verificar si es un movimiento de aspiraci칩n (mejora el mejor resultado global)
                heuristica = calcular_heuristica(sucesor_estado, n_discos)
                if heuristica < mejor_heuristica:
                    # Movimiento de aspiraci칩n - usarlo a pesar de estar en la lista tab칰
                    mejor_heuristica_sucesor = heuristica
                    mejor_sucesor = sucesor_estado
                    mejor_movimiento = movimiento

        if mejor_sucesor is not None:
            # Actualizar estado
            estado_actual = mejor_sucesor
            camino_actual.append(mejor_movimiento)
            
            # Agregar movimiento a la lista tab칰
            lista_tabu.append(mejor_movimiento)
            
            # Mantener tama침o m치ximo de la lista tab칰
            if len(lista_tabu) > tamano_lista_tabu:
                lista_tabu.pop(0)  # Remover el movimiento m치s antiguo
            
            # Actualizar el mejor estado si encontramos uno mejor
            if mejor_heuristica_sucesor < mejor_heuristica:
                mejor_heuristica = mejor_heuristica_sucesor
                mejor_estado = mejor_sucesor
        else:
            # No se encontr칩 un sucesor no tab칰, intentar con sucesor no tab칰 de mejor calidad
            # En este caso, simplemente elegiremos el mejor movimiento posible
            mejor_heuristica_sucesor = float('inf')
            for sucesor_estado, movimiento in sucesores:
                heuristica = calcular_heuristica(sucesor_estado, n_discos)
                if heuristica < mejor_heuristica_sucesor:
                    mejor_heuristica_sucesor = heuristica
                    mejor_sucesor = sucesor_estado
                    mejor_movimiento = movimiento
            
            if mejor_sucesor is not None:
                estado_actual = mejor_sucesor
                camino_actual.append(mejor_movimiento)
                
                # Agregar movimiento a la lista tab칰
                lista_tabu.append(mejor_movimiento)
                if len(lista_tabu) > tamano_lista_tabu:
                    lista_tabu.pop(0)

    print("El algoritmo no encontr칩 una soluci칩n dentro del l칤mite de iteraciones.")
    print(f"Iteraciones realizadas: {max_iter}")
    
    # Mostrar informaci칩n sobre el mejor estado encontrado
    print(f"Mejor estado encontrado: {mejor_estado}")
    print(f"Heur칤stica del mejor estado: {mejor_heuristica}")
    
    return estado_actual == estado_final


# --- Uso del programa ---
if __name__ == "__main__":
    try:
        n_discos = int(input("Introduce la cantidad de discos (un n칰mero entero): "))
        if n_discos > 0:
            hanoi_busqueda_tabu(n_discos)
        else:
            print("Por favor, introduce un n칰mero entero positivo.")
    except ValueError:
        print("Entrada no v치lida. Por favor, introduce un n칰mero entero.")